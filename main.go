package main

import (
	"database/sql"
	"flag"
	"fmt"
	"log"
	"os"
	"path/filepath"
	"time"

	_ "github.com/go-sql-driver/mysql"
)

type Config struct {
	Host     string
	Port     int
	User     string
	Password string
	Database string
	Output   string
	Print    bool
}

func main() {
	config := parseFlags()
	if err := export(config); err != nil {
		log.Fatal(err)
	}
}

func parseFlags() *Config {
	config := &Config{}

	flag.StringVar(&config.Host, "h", "localhost", "MySQL host")
	flag.IntVar(&config.Port, "p", 3306, "MySQL port")
	flag.StringVar(&config.User, "u", "", "MySQL user")
	flag.StringVar(&config.Password, "pass", "", "MySQL password")
	flag.StringVar(&config.Database, "db", "", "Database name")
	flag.StringVar(&config.Output, "out", "schema.sql", "Output file path")
	flag.BoolVar(&config.Print, "print", false, "print schema")

	flag.Parse()

	if config.User == "" || config.Database == "" {
		flag.Usage()
		os.Exit(1)
	}

	return config
}

func export(config *Config) error {
	if err := os.MkdirAll(config.Output, 0755); err != nil {
		return fmt.Errorf("failed to create output directory: %w", err)
	}

	// Prepare output file path
	outputPath := filepath.Join(config.Output, "schema.sql")

	dsn := fmt.Sprintf("%s:%s@tcp(%s:%d)/%s",
		config.User,
		config.Password,
		config.Host,
		config.Port,
		config.Database,
	)

	db, err := sql.Open("mysql", dsn)
	if err != nil {
		return fmt.Errorf("failed to connect to database: %w", err)
	}
	defer db.Close()

	// Get all table names
	tables, err := getTables(db)
	if err != nil {
		return err
	}

	// Create output file
	f, err := os.Create(outputPath)
	if err != nil {
		return fmt.Errorf("failed to create output file: %w", err)
	}
	defer f.Close()

	if config.Print {
		f = os.Stdin
	}

	// Write header
	fmt.Fprintf(f, "-- Generated by schemaloader on %s\n", time.Now().Format("2006-01-02 15:04:05"))
	fmt.Fprintf(f, "-- Database: %s\n\n", config.Database)
	fmt.Fprintf(f, "SET FOREIGN_KEY_CHECKS=0;\n\n")

	// Export each table
	for _, table := range tables {
		// Get create table statement
		var tableSchema string
		query := fmt.Sprintf("SHOW CREATE TABLE `%s`", table)
		row := db.QueryRow(query)
		var tableName string
		if err := row.Scan(&tableName, &tableSchema); err != nil {
			return fmt.Errorf("failed to get schema for table %s: %w", table, err)
		}

		fmt.Fprintf(f, "%s;\n\n", tableSchema)
	}

	fmt.Fprintf(f, "SET FOREIGN_KEY_CHECKS=1;\n")
	return nil
}

func getTables(db *sql.DB) ([]string, error) {
	rows, err := db.Query("SHOW TABLES")
	if err != nil {
		return nil, fmt.Errorf("failed to get tables: %w", err)
	}
	defer rows.Close()

	var tables []string
	for rows.Next() {
		var table string
		if err := rows.Scan(&table); err != nil {
			return nil, fmt.Errorf("failed to scan table name: %w", err)
		}
		tables = append(tables, table)
	}

	return tables, nil
}
